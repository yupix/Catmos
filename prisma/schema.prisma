// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "scheme.md"
}

model CustomEmoji {
  id        String   @id @default(uuid())
  name      String   @unique
  aliases   String[]
  category  String?
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}

model User {
  id           String         @id @default(cuid())
  sub          String         @unique
  name         String
  displayName  String?        @map("display_name")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  avatarUrl    String?        @map("avatar_url")
  bio          String?
  meows        Meow[]
  bannerUrl    String?        @map("banner_url")
  files        File[]
  folders      Folder[]
  Notification Notification[]
  following    User[]         @relation("UserToUser")
  followers    User[]         @relation("UserToUser")
  favorites    Favorite[]
  MeowReaction MeowReaction[]
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  files     File[]
  parentId  String?
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
}

// ファイル
model File {
  id          String        @id @default(uuid())
  filename    String
  mimetype    String
  url         String        @unique
  authorId    String        @map("author_id")
  author      User          @relation(fields: [authorId], references: [id])
  createdAt   DateTime      @default(now()) @map("created_at")
  meow        Meow?         @relation(fields: [meowId], references: [id])
  meowId      String?       @map("meow_id")
  folder      Folder?       @relation(fields: [folderId], references: [id])
  folderId    String?
  CustomEmoji CustomEmoji[]
}

// 投稿
model Meow {
  id          String   @id @default(uuid())
  text        String?
  authorId    String   @map("author_id")
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  attachments File[]
  // 1:1でreplyとremeowを持つ
  replyId     String?  @map("reply_id")
  reply       Meow?    @relation("ReplyToMeow", fields: [replyId], references: [id])

  remeowId String? @map("remeow_id")
  remeow   Meow?   @relation("RemeowToMeow", fields: [remeowId], references: [id])

  replies      Meow[]         @relation("ReplyToMeow")
  remeows      Meow[]         @relation("RemeowToMeow")
  notification Notification[]
  favorites    Favorite[]
  MeowReaction MeowReaction[]
}

model MeowReaction {
  id        String   @id @default(uuid())
  meowId    String   @map("meow_id")
  meow      Meow     @relation(fields: [meowId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  reaction  String
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([meowId, userId], name: "unique_meow_user_reaction")
}

// お気に入り
model Favorite {
  id        String   @id @default(uuid())
  meowId    String   @map("meow_id")
  meow      Meow     @relation(fields: [meowId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([meowId, userId], name: "unique_meow_user")
}

// 通知
model Notification {
  id        String   @id @default(uuid())
  isRead    Boolean  @default(false) @map("is_read")
  type      String
  meowId    String?  @map("meow_id")
  meow      Meow?    @relation(fields: [meowId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
}
