// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  sub         String   @unique
  name        String
  displayName String?  @map("display_name")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  avatarUrl   String?  @map("avatar_url")
  meows       Meow[]
  files       File[]
  folders     Folder[]
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  files     File[]
  parentId  String?
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
}

// ファイル
model File {
  id        String   @id @default(uuid())
  filename  String
  mimetype  String
  url       String   @unique
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  meow      Meow?    @relation(fields: [meowId], references: [id])
  meowId    String?  @map("meow_id")
  Folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  String?
}

// 投稿
model Meow {
  id          String   @id @default(uuid())
  text        String
  authorId    String   @map("author_id")
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  attachments File[]
}
